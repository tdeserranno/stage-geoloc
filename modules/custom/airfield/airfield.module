<?php

/**
 * @file Airfield module
 * 
 * Defines a custom content type airfield with 2 custom fields latiatude, longitude.
 * Adds a google map with the node coordinates to the node view.
 * Also defines a block with a google map containing markers for all nodes of the airfield type.
 * 
 * Tutorials used:
 * http://www.sitepoint.com/creating-a-new-drupal-node-type/
 * Lynda.com windfarms module
 */

/**
 * Implements hook_help().
 */
function airfield_help($path, $args) {
  if ($path === 'admin/help#airfield') {
    return '<p>' . t('Airfield content type and Map block') . '</p>';
  }
}

/**
 * Implements hook_node_info().
 * Define new content type
 */
function airfield_node_info() {
  return array(
    'airfield' => array(
      'name' => t('Airfield'),
      'base' => 'airfield',
      'description' => t('Airfield details, including latitude and longitude'),
      'has_title' => TRUE,
      'title_label' => t('Airfield title'),
    ),
  );
}

/**
 * Implements hook_form().
 * Airfield node creation/edit form
 */
function airfield_form($node, $form_state) {
  return node_content_form($node, $form_state);
}

/**
 * Implements hook_form_alter().
 * Assign custom validation function to airfield_node_form
 */
function airfield_form_alter(&$form, &$form_state, $form_id) {
//    dpm($form_id);
  if ($form_id == 'airfield_node_form') {
    $form['#validate'][] = 'airfield_form_validate';
  }
}

/**
 * Custom function : airfield node form validation
 */
function airfield_form_validate($form, &$form_state) {
  // Validate Latitude.
  $lat = $form_state['values']['latitude'][LANGUAGE_NONE][0]['value'];
  if (!_airfield_validate_geo_coord_range($lat) || !_airfield_validate_signed_degrees($lat)) {
    form_set_error('latitude', t('Latitude must be valid coordinates in signed degrees.'));
  }

  // Validate Longitude.
  $long = $form_state['values']['longitude'][LANGUAGE_NONE][0]['value'];
  if (!_airfield_validate_geo_coord_range($long) || !_airfield_validate_signed_degrees($long)) {
    form_set_error('longitude', t('Longitude must be valid coordinates in signed degrees.'));
  }
}

/**
 * Implements hook_block_info().
 * Define custom block
 */
function airfield_block_info() {
  $blocks = array();

  $blocks['airfield_gmap'] = array(
    'info' => t('Airfield map'),
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 * Define block view
 */
function airfield_block_view($delta = '') {
  $block = array();

  if ($delta === 'airfield_gmap') {
    $block = array(
      'subject' => t('Airfield Map'),
      'content' => _airfield_block_content($delta),
    );
  }

  return $block;
}

/**
 * Custom function : generate block content as html string
 */
function _airfield_block_content($block_id) {
  if ($block_id === 'airfield_gmap') {
    // Get all nodes of airfield type
    $airfield_nodes = _airfield_get_nodes();
//    dpm($airfield_nodes, 'airfields');
    // Build JS data
    $settings = _airfield_generate_map_settings($airfield_nodes);

    // Add custom Javascript
    _airfield_add_javascript($settings);

    // Theme output
    $output = array(
      '#markup' => theme('airfield_gmap', array(
        'settings' => $settings,
      )),
    );
  }

  return $output;
}

/**
 * Implements hook_node_view().
 * Add a gmap when viewing the full node.
 */
function airfield_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'airfield' && $view_mode == 'full') {
    // Build JS data
    $settings = _airfield_generate_map_settings(array($node));

    // Add custom Javascript
    _airfield_add_javascript($settings);

    // Theme map
    $node->content['airfield_gmap'] = array(
      '#markup' => theme('airfield_gmap', array(
        'settings' => $settings,
      )),
      '#weight' => -10,
    );
  }
}

/**
 * Implements hook_theme().
 * Register custom theming functions.
 */
function airfield_theme($existing, $type, $theme, $path) {
  return array(
    'airfield_gmap' => array(
      'variables' => array('settings' => NULL),
    ),
  );
}

/**
 * Airfield theme function for map container.
 * Always pass settings variable to this theme function, as it contains the
 * canvas id and width and height settings.
 */
function theme_airfield_gmap($variables) {
  $settings = $variables['settings'];

  // Cannot render map without markers.
  if (empty($settings['markers'])) {
    return;
  }

  $output = '<div id="' . $settings['canvas'] . '" style="width:' . $settings['map']['width'] . 'px;height:' . $settings['map']['height'] . 'px;"></div>';
  return $output;
}

/**
 * Custom function : Determine if a value is in signed degrees format.
 * @param string $value - The value to be tested.
 * @return boolean - true if correctly formatted.
 */
function _airfield_validate_signed_degrees($value) {
  // regular expression for validating signed degrees.
  $signed_degree_regex = '/^[+-]?\d+(\.\d+)?$/';

  return preg_match($signed_degree_regex, $value) ? true : false;
}

/**
 * Custom function : Determine if a geographic coordinate is within the valid range.
 * @param string $value - The value to be tested.
 * @return boolean - True if between -180 and 180.
 */
function _airfield_validate_geo_coord_range($value) {
  return ((-180 <= $value) && ($value <= 180));
}

/**
 * Custom function : Get all nodes of airfield type
 */
function _airfield_get_nodes() {
  $type = 'airfield';
  // Get node id's.
  $query = db_select('node', 'n')
      ->fields('n', array('nid'))
      ->condition('n.type', $type);
  $nids = $query->execute()->fetchCol();

  // Load nodes.
  $nodes = node_load_multiple($nids);

  return $nodes;
}

/**
 * Custom function : generate settings variable to be passed onto airfield JS
 * behavior. 
 * @param array $nodes - array of (airfield) nodes. Nodes must have latitude and
 *                       longitude field.
 * @param string $canvas - id attribute of the map container
 * @return array - settings variable
 */
function _airfield_generate_map_settings($nodes, $canvas = 'gmap-canvas') {
  $settings = array();

  $settings['canvas'] = $canvas;
  $settings['markers'] = array();
  $settings['map'] = array(
    'width' => 640,
    'height' => 480,
  );

  // If nodes are empty, use default configuration values, else use provided node data
  if (empty($nodes)) {
    $settings['markers'][] = array(
      'title' => 'default',
      'latitude' => variable_get('airfield_gmap_def_lat'),
      'longitude' => variable_get('airfield_gmap_def_lng'),
      'url' => '',
    );
    $settings['map']['zoom'] = variable_get('airfield_gmap_def_zoom', 8);
  }
  else {
    foreach ($nodes as $node) {
      $marker = array(
        'title' => $node->title,
        'latitude' => $node->latitude[LANGUAGE_NONE][0]['value'],
        'longitude' => $node->longitude[LANGUAGE_NONE][0]['value'],
        'url' => url('node/' . $node->nid),
      );
      $settings['markers'][] = $marker;
    }
  }
  return $settings;
}

/**
 * Implements hook_menu().
 */
function airfield_menu() {
  $items = array();

  $items['admin/airfield/admin_gmap'] = array(
    'title' => 'Admin GMAP',
    'description' => 'Administer Google Maps API settings for airfield module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('airfield_admin_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Form builder : admin settings for airfield module
 */
function airfield_admin_form($form, &$form_state) {
  $form['airfield_gmap_api_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Google Maps API key'),
    '#size' => 100,
    '#maxlength' => 255,
    '#required' => TRUE,
    '#default_value' => variable_get('airfield_gmap_api_key'),
  );
  $form['airfield_gmap_def_lat'] = array(
    '#type' => 'textfield',
    '#title' => t('Google Maps default latitude'),
    '#size' => 100,
    '#maxlength' => 255,
    '#required' => TRUE,
    '#default_value' => variable_get('airfield_gmap_def_lat'),
  );
  $form['airfield_gmap_def_lng'] = array(
    '#type' => 'textfield',
    '#title' => t('Google Maps default longitude'),
    '#size' => 100,
    '#maxlength' => 255,
    '#required' => TRUE,
    '#default_value' => variable_get('airfield_gmap_def_lng'),
  );
  $form['airfield_gmap_def_zoom'] = array(
    '#type' => 'textfield',
    '#title' => t('Google Maps default zoom level'),
    '#size' => 100,
    '#maxlength' => 255,
    '#required' => TRUE,
    '#default_value' => variable_get('airfield_gmap_def_zoom'),
  );

  return system_settings_form($form);
}

/**
 * Custom function : Add javascript files
 * @param type $settings - The data you want to pass onto the JS behavior,
 * accessible through Drupal.settings. Use _airfield_generate_map_settings
 * function to provide this variable.
 */
function _airfield_add_javascript($settings) {
  // Get API key
  $api_key = variable_get('airfield_gmap_api_key');

  // Add Google maps API key
  drupal_add_js('https://maps.googleapis.com/maps/api/js?key=' . $api_key, 'external');

  // Pass data to JS Drupal.settings
  drupal_add_js(array('airfield' => array('data' => $settings)), 'setting');

  // Add JS behavior file
  $path = drupal_get_path('module', 'airfield') . '/airfield.behaviors.js';
//  dpm($path, 'path to js file');
  drupal_add_js($path);
}
